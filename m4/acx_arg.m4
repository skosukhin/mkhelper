# ACX_ARG_WITH_DIR(arg-name,
# [default-val = ''],
# [default-overriding-shell-var],
# [help-string = autogenerated],
# [ACTION-IF-EMPTY = do nothing],
# [ACTION-IF-DIRECTORY-NOT-FOUND = failure])
# ---------------------------------------------------------------------
# Add --with-arg-name argument (with an optional help string) that
# must equal to the path to a directory (run
# ACTION-IF-DIRECTORY-NOT-FOUND if the specified directory does not
# exist). Override the default value default-val with the value of the
# shell variable default-overriding-shell-var if it is set. Run
# ACTION-IF-EMPTY if the string provided as an argument is empty and
# fail the execution if the string contains whitespaces.
# 
# The result is stored to the $with_arg_name variable.
AC_DEFUN([ACX_ARG_WITH_DIR],[
AC_ARG_WITH([$1],
  m4_default([$4],
    [AS_HELP_STRING([--with-$1=<directory>],
      [path to ]m4_translit([$1], [-], [ ])[ @<:@]m4_ifval([$3], [[default=$$3 if the shell variable is set, otherwise ]])[default=]m4_default([$2], [''])[@:>@])]),
  [],
  [m4_ifval([$3],
    [AS_VAR_SET_IF([$3],
      [AC_MSG_NOTICE([argument for --with-$1 is set to the value of the shell variable $3=$$3])
      with_[]m4_translit([$1], [-+.], [___])[]=$$3],
      [with_[]m4_translit([$1], [-+.], [___])[]=[]m4_default([$2], [''])])],
    [with_[]m4_translit([$1], [-+.], [___])[]=m4_default([$2], [''])])
  withval=$with_[]m4_translit([$1], [-+.], [___])])
AS_CASE([$withval],
  [''], m4_default([$5], []),
  [*\ *], [AC_MSG_ERROR([argument specified for --with-$1 contains whitespaces])],
  [AS_IF([test -d "$with_[]m4_translit([$1], [-+.], [___])[]"],
    [],
    [m4_default([$6], [AC_MSG_ERROR([directory \"$withval\" specified for --with-$1 not found])])])])
])

# ACX_ARG_ENABLE_YES_NO(arg-name,
# default-val,
# [default-overriding-shell-var],
# [help-string = autogenerated]
# [ACTION-IF-YES],
# [ACTION-IF-NO])
# ---------------------------------------------------------------------
# Add --enable-arg-name argument (with an optional help string) that
# must equal either to "yes" or to "no". Override the default value
# default-val with the value of the shell variable
# default-overriding-shell-var if it is set. Run ACTION-IF-YES if the
# specified value equals to "yes", run ACTION-IF-NO if the specified
# value equals to "no". Fail the execution if the the specified
# argument neither "yes" nor "no".
#
# The result is stored to the $enable_arg_name variable.
AC_DEFUN([ACX_ARG_ENABLE_YES_NO],[
AC_ARG_ENABLE([$1],
  m4_default([$4],
    [AS_HELP_STRING([--enable-$1=<yes|no>],
      [use ]m4_translit([$1], [-], [ ])[ @<:@]m4_ifval([$3], [[default=$$3 if the shell variable is set, otherwise ]])[default=$2@:>@])]),
  [],
  [m4_ifval([$3],
    [AS_VAR_SET_IF([$3],
      [AC_MSG_NOTICE([argument for --enable-$1 is set to the value of the shell variable $3=$$3])
      enable_[]m4_translit([$1], [-+.], [___])[]=$$3],
      [enable_[]m4_translit([$1], [-+.], [___])[]=$2])],
    [enable_[]m4_translit([$1], [-+.], [___])[]=$2])
  enableval=$enable_[]m4_translit([$1], [-+.], [___])])
AS_IF([test "x$enableval" = xyes],
  [$5],
  [AS_IF([test "x$enableval" = xno],
    [$6],
    [AC_MSG_ERROR([argument for --enable-$1 must be either "yes" or "no", provided "$enableval"])])])    
])
