# Source file directory:
SRC_DIR=@srcdir@/src

# Build directories:
DEP_DIR=deps
OBJ_DIR=objs
MOD_DIR=mods
LIB_DIR=lib
BIN_DIR=bin

# Install directories:
prefix=@prefix@
exec_prefix=@exec_prefix@

# Compilers, building tools and the corresponding flags:
FC=@FC@
FCFLAGS=@FC_MODINC@$(MOD_DIR) -I$(SRC_DIR)/include @FC_MODOUT@$(MOD_DIR) @FCFLAGS@
LDFLAGS=@LDFLAGS@
LIBS=@LIBS@

AR=@AR@
INSTALL=@INSTALL@
INSTALL_DATA=@INSTALL_DATA@

# Dependency generation command:
DEPGEN=@PYTHON@ @srcdir@/mkhelper/depgen.py \
       @depgen.config $< -o $@ -d $(@:.d=.debug) \
       --obj-name $(OBJ_DIR)/$(<F:.f90=.o) --src-name $(<F) \
       -- @DEPGEN_DEFS@

# Dependency listing command:
DEPLIST=@PYTHON@ @srcdir@/mkhelper/deplist.py

# List of the dependency files:
srcs=$(notdir $(shell find $(SRC_DIR) -name '*.f90'))
DEP_FILES=$(addprefix $(DEP_DIR)/, $(srcs:.f90=.f90.d))
DEP_FILES+=$(DEP_DIR)/_undetectable.d

# Source file selective search paths:
vpath %.f90 $(shell find $(SRC_DIR) -type d)

# Disable built-in suffix rules:
.SUFFIXES:
# Targets not associated with files:
.PHONY: all depend clean distclean maintainer-clean install
# Keep sentinel files of created directories:
.PRECIOUS: %/.sentinel

# User interface rules:
all: $(BIN_DIR)/main;

depend: $(DEP_FILES)

clean:
	rm -rf $(DEP_DIR) $(OBJ_DIR) $(MOD_DIR) $(LIB_DIR) $(BIN_DIR)

distclean: clean
	rm -f config.log config.status Makefile depgen.config

maintainer-clean: distclean
	rm -rf @srcdir@/autom4te.cache $(shell find @srcdir@/mkhelper -name '*.pyc' -o -name '*.pyo' -o -name '__pycache__')

install: $(BIN_DIR)/main $(LIB_DIR)/libmain.a
	$(INSTALL) -d @bindir@ @libdir@
	$(INSTALL) $(BIN_DIR)/main @bindir@/main
	$(INSTALL_DATA) $(LIB_DIR)/libmain.a @libdir@/libmain.a

# Main building rules:
$(BIN_DIR)/main: $(OBJ_DIR)/main.o $(LIB_DIR)/libmain.a | $(BIN_DIR)/.sentinel
	$(FC) $(LDFLAGS) -o $@ $^ $(LIBS)

$(LIB_DIR)/libmain.a: $(shell $(DEPLIST) -p '*.o' -t $(OBJ_DIR)/main.o -f $(DEP_DIR)/*.d) | $(LIB_DIR)/.sentinel
	$(AR) cru $@ $^

$(OBJ_DIR)/%.o: %.f90 | $(MOD_DIR)/.sentinel $(OBJ_DIR)/.sentinel
	$(FC) -c $(FCFLAGS) -o $@ @FCFLAGS_f90@ $<

# Auxiliary building rules:
$(MOD_DIR)/%.@FC_MODULE_EXT@:
	@if test -z $<; then \
	  echo "Cannot find Fortran source file providing module '$(basename $(@F))'." && false; \
	elif test ! -f $@; then \
	  rm -f $<; $(MAKE) $<; \
	fi

# Some old versions of GNU Make strip the trailing slash when
# searching for pattern rules, which is why we have to
# create sentinel files inside the created directories:
%/.sentinel:
	@echo "Creating directory '$(@D)'..."; mkdir $(@D); touch $@

# Common dependency generation rule:
$(DEP_DIR)/%.f90.d: %.f90 | $(DEP_DIR)/.sentinel
	@$(DEPGEN) $(FCFLAGS)

# Undetectable dependencies:
$(DEP_DIR)/_undetectable.d: | $(DEP_DIR)/.sentinel
	@echo $(OBJ_DIR)/main.o: $(OBJ_DIR)/implicit_external.o > $@

ifeq (,$(filter $(MAKECMDGOALS), depend clean distclean maintainer-clean))
-include $(DEP_FILES)
endif
