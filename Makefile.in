FC=@FC@
FCFLAGS=@FCFLAGS@
LDFLAGS=@LDFLAGS@
LIBS=@LIBS@

# Add definitions
FCFLAGS+=@FC_DEFINITIONS@

src_dir=@srcdir@/src
src_f90_files=$(notdir $(shell find $(src_dir) -name '*.f90'))
vpath %.f90 $(shell find $(src_dir) -type d)

dep_dir=dep
dep_f90_files=$(addprefix $(dep_dir)/, $(patsubst %.f90, %.d, $(src_f90_files)))

obj_dir=obj
mod_dir=mod

# Dependency generator

dep_gen=@PYTHON@ @srcdir@/mkhelper/depgen.py
# The dependency generator ignores these modules as dependencies
dep_external_mods="mpi"

dep_gen_flags=--root='$(src_dir)' --pp-enable --pp-eval-expr\
              --pp-inc-order='@FORTDEP_INC_PP_ORDER@' --pp-macro-flag='@FC_DEFINE@'\
              --fc-enable --fc-mod-ext='@FORTDEP_MODULE_FILE_EXT@'\
              --fc-mod-upper='@FORTDEP_MODULE_FILE_UPPER@' --fc-inc-order='@FORTDEP_INC_ORDER@'\
              --fc-external-mods='$(dep_external_mods)' --fc-mod-dir-flag='@FC_MODOUT@'

# Dependency collector
dep_collector=@PYTHON@ @srcdir@/mkhelper/deplist.py
# Function that collects all *.o prerequisites of a given target.
required_objs=$(shell $(dep_collector) -p '*.o' $(1) $(dep_dir)/*.d 2> /dev/null)

# Disable suffix rules
.SUFFIXES:
# These targets are not associated with files
.PHONY: all clean depend distclean
# Keep created directories
.PRECIOUS: %/.sentinel

FCFLAGS:=@FC_MODINC@$(mod_dir) -I$(src_dir)/include $(FCFLAGS) @FC_MODOUT@$(mod_dir)

all: main;

main : $(obj_dir)/main.o $(call required_objs, $(obj_dir)/main.o)
	$(FC) $(LDFLAGS) -o $@ $^  $(LIBS)

$(mod_dir)/%.@FORTDEP_MODULE_FILE_EXT@:
	@if $(if $<,true,false); then if test -f $@; then :; else rm -f $<; $(MAKE) $<; fi; \
        if test -f $@; then :; else false; fi; fi

$(obj_dir)/%.o: %.f90 $(mod_dir)/.sentinel $(obj_dir)/.sentinel
	$(FC) -c $(FCFLAGS) -o $@ -c @FCFLAGS_f90@ $<

$(dep_dir)/%.d: %.f90 $(dep_dir)/.sentinel
	@$(dep_gen) $< $@ --debug $(@:.d=.debug) --target $(obj_dir)/$(@F:.d=.o) --src-prereq $(<F) $(dep_gen_flags) -- $(FCFLAGS) 2> /dev/null

# Append undetectable dependencies
$(dep_dir)/main.d: main.f90 $(dep_dir)/.sentinel
	@$(dep_gen) $< $@ --debug $(@:.d=.debug) --target $(obj_dir)/$(@F:.d=.o) --src-prereq $(<F) $(dep_gen_flags) -- $(FCFLAGS) 2> /dev/null && \
	echo $(obj_dir)/$(@F:.d=.o): $(obj_dir)/implicit_external.o >> $@

%/.sentinel:
	@echo Creating directory $(@D); mkdir $(@D); touch $@

depend: $(dep_f90_files)

depclean:
	rm -rf $(dep_dir)

clean:
	rm -rf $(mod_dir) $(obj_dir) main

distclean: depclean clean
	rm -f config.log config.status Makefile $$(find @srcdir@/mkhelper -name '*.pyc' -o -name '*.pyo')

maintainer-clean: distclean
	rm -rf autom4te.cache

ifeq (,$(filter $(MAKECMDGOALS), clean depclean distclean depend maintainer-clean))
-include $(dep_f90_files)
endif
