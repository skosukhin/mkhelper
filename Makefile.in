# Source file directory
SRC_DIR=@srcdir@/src

# Build directories
DEP_DIR=@builddir@/deps
OBJ_DIR=@builddir@/objs
MOD_DIR=@builddir@/mods
LIB_DIR=@builddir@/lib
BIN_DIR=@builddir@/bin

# Compilers, building tools and the corresponding flags
FC=@FC@
FCFLAGS=@FC_MODINC@$(MOD_DIR) -I$(SRC_DIR)/include @FC_DEFS@ @FC_MODOUT@$(MOD_DIR) @FCFLAGS@
LDFLAGS=@LDFLAGS@
LIBS=@LIBS@

AR=@AR@

DEPGEN=@PYTHON@ @srcdir@/mkhelper/depgen.py
DEPLIST=@PYTHON@ @srcdir@/mkhelper/deplist.py

# List of external modules for the dependency generation
EXTERNAL_MODS=mpi

# Dependency generation command for Fortran source files
DEPGEN_f90=$(DEPGEN) $< $@ --target $(OBJ_DIR)/$(<F:.f90=.o) --src-prereq $(<F)\
           --src-root='@srcdir@' --pp-enable --pp-eval-expr\
           --pp-inc-order='@PP_INC_ORDER_f90@' --pp-macro-flag='@FC_DEFINE@'\
           --fc-enable --fc-mod-ext='@FC_MODULE_EXT@' --fc-mod-upper='@FC_MODULE_UPPER@'\
           --fc-inc-order='@FC_INC_ORDER@' --fc-external-mods='$(EXTERNAL_MODS)'\
           --fc-mod-dir-flag='@FC_MODOUT@'\
           --debug $(@:.f90.d=.f90.debug)\
           --

# List of the dependency files
src_f90=$(notdir $(shell find $(SRC_DIR) -name '*.f90'))
DEP_FILES=$(addprefix $(DEP_DIR)/, $(src_f90:.f90=.f90.d))

# Source file selective search paths
vpath %.f90 $(shell find $(SRC_DIR) -type d)

# Disable built-in suffix rules
.SUFFIXES:
# Targets not associated with files
.PHONY: all depend clean depclean distclean maintainer-clean
# Keep sentinel files of created directories
.PRECIOUS: %/.sentinel

# User interface rules
all: $(BIN_DIR)/main;

depend: $(DEP_FILES)

clean:
	rm -rf $(BIN_DIR) $(LIB_DIR) $(MOD_DIR) $(OBJ_DIR)

depclean:
	rm -rf $(DEP_DIR)

distclean: clean depclean
	rm -f config.log config.status Makefile $(shell find @srcdir@/mkhelper -name '*.pyc' -o -name '*.pyo')

maintainer-clean: distclean
	rm -rf autom4te.cache

# Main building rules
$(BIN_DIR)/main: $(OBJ_DIR)/main.o $(LIB_DIR)/libmain.a | $(BIN_DIR)/.sentinel
	$(FC) $(LDFLAGS) -o $@ $^ $(LIBS)

$(LIB_DIR)/libmain.a: $(shell $(DEPLIST) -p '*.o' $(OBJ_DIR)/main.o $(DEP_DIR)/*.d) | $(LIB_DIR)/.sentinel
	$(AR) cru $@ $^

$(OBJ_DIR)/%.o: %.f90 | $(MOD_DIR)/.sentinel $(OBJ_DIR)/.sentinel
	$(FC) -c $(FCFLAGS) -o $@ @FCFLAGS_f90@ $<

# Auxiliary building rules
$(MOD_DIR)/%.@FORTDEP_MODULE_FILE_EXT@:
	@if test -z $<; then \
	  echo 'Unexpected request to compile Fortran module $(basename $(@F)).' && false; \
	elif test ! -f $@; then \
	  rm -f $<; $(MAKE) $<; \
	fi

# Some old versions of GNU Make strip the trailing slash when
# searching for pattern rules, which is why we have to
# create sentinel files inside the created directories.
%/.sentinel:
	@echo Creating directory $(@D); mkdir $(@D); touch $@

# Common dependency generation rule
$(DEP_DIR)/%.f90.d: %.f90 | $(DEP_DIR)/.sentinel
	@$(DEPGEN_f90) $(FCFLAGS) 2> /dev/null

# Overriden dependency generation rules for source files with undetectable dependencies
$(DEP_DIR)/main.f90.d: main.f90 | $(DEP_DIR)/.sentinel
	@$(DEPGEN_f90) $(FCFLAGS) 2> /dev/null && \
	echo $(OBJ_DIR)/$(<F:.f90=.o): $(OBJ_DIR)/implicit_external.o >> $@

ifeq (,$(filter $(MAKECMDGOALS), clean depclean distclean depend maintainer-clean))
-include $(DEP_FILES)
endif
