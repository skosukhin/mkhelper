# Source file root directory:
srcdir= @srcdir@

# Source file subdirectories:
subdirs= src

# Bundled subdirectories:
bundled_subdirs= @subdirs_extra@

# Installation directories:
prefix= @prefix@
exec_prefix= @exec_prefix@

# Fortran module file directory:
moddir= mod

# Shell and environment:
SHELL= @SHELL@
BUILD_ENV= @BUILD_ENV@

# Compilers and flags:
FC= @FC@
FPP= @FPP@
FCFLAGS= @FCFLAGS@
LDFLAGS= @LDFLAGS@
LIBS= @LIBS@
config_FCFLAGS= @FC_MOD_IN@$(moddir) @FC_MOD_OUT@$(moddir) @FC_INC_FLAG@$(srcdir)/src/include @FC_INC_FLAG_PP_f90@$(srcdir)/src/include @NETCDF_FCFLAGS@ @config_FCFLAGS@
config_LIBS= @NETCDF_FCLIBS@

# Other utilities:
INSTALL= @INSTALL@
INSTALL_DATA=@INSTALL_DATA@
AR= @AR@
PYTHON= @PYTHON@
DEPLIST= $(PYTHON) $(srcdir)/mkhelper/deplist.py -d deplist.debug
DEPGEN= $(PYTHON) $(srcdir)/mkhelper/depgen.py

# Silent rule prefixes:
V= @DEFAULT_VERBOSITY@
ifeq ($(V), 0)
silent_FCLD=   @echo "  FCLD    " $@;
silent_FC=     @echo "  FC      " $@;
silent_MKDIR=  @echo "  MKDIR   " $(@D);
silent_DEPGEN= @echo "  DEPGEN  " $@;
silent_AR=     @echo "  AR      " $@;
endif

# Source files:
srcs= $(shell find $(addprefix $(srcdir)/, $(subdirs)) -name '*.f90')

# Stamp files of the build directories:
dirstamps= $(patsubst $(srcdir)/%, %.dirstamp, $(sort $(dir $(srcs)))) $(moddir)/.dirstamp

# Dependency files:
depfiles= $(patsubst $(srcdir)/%, %.d, $(srcs))

# Root object file:
rootobj= src/program/main.o

# Source file selective search paths:
vpath %.f90 $(srcdir)

# Disable built-in suffix rules:
.SUFFIXES:
# Targets not associated with files:
.PHONY: all depend mostlyclean clean distclean maintainer-clean install dummy-depfiles
# Call make inside the subdirectories unconditionally:
.PHONY: $(bundled_subdirs)
# Keep sentinel files of created directories:
.PRECIOUS: $(dirstamps)

# User interface rules:
all: main

depend: $(depfiles)

mostlyclean: $(bundled_subdirs)
	rm -f main libmain.a $(patsubst $(srcdir)/%.f90, %.o, $(srcs)) $(moddir)/*.@FC_MOD_FILE_EXT@

clean: mostlyclean
	rm -rf deplist.debug

distclean: clean
	rm -f $(depfiles) $(dirstamps) config.log config.status Makefile depgen.config
	find -name '*.pyc' -delete -o -name '*.pyo' -delete -o -name '__pycache__' -delete
	@for dir in $(subdirs) $(bundled_subdirs) $(moddir) externals; do \
	  if test -d "$$dir"; then \
	    echo "find '$$dir' -type d -empty -delete"; \
	    find "$$dir" -type d -empty -delete; \
	  fi; \
	done

maintainer-clean: distclean
	rm -rf autom4te.cache

install: all
	$(INSTALL) -d $(DESTDIR)@bindir@ && $(INSTALL) main $(DESTDIR)@bindir@/main
	$(INSTALL) -d $(DESTDIR)@libdir@ && $(INSTALL_DATA) libmain.a $(DESTDIR)@libdir@/libmain.a

# Main building rules:
main: $(rootobj) libmain.a
	$(silent_FCLD)$(BUILD_ENV) $(FC) -o $@ $(config_FCFLAGS) $(FCFLAGS) $(LDFLAGS) $^ $(config_LIBS) $(LIBS)

libmain.a: $(shell $(DEPLIST) -t $(rootobj) -p '*.o' --inc-oo -f $(depfiles) Makefile)
	$(silent_AR)$(BUILD_ENV) rm -f $@ && $(AR) cru $@ $^

%.o: %.f90 | $(dirstamps) $(bundled_subdirs)
	$(silent_FC)$(BUILD_ENV) $(FC) -o $@ -c $(config_FCFLAGS) $(FCFLAGS) @FCFLAGS_f90@ $<

# Fortran module file tracking rule:
$(moddir)/%.@FC_MOD_FILE_EXT@:
	@if test -z $<; then \
	  echo "Cannot find Fortran source file providing module '$(basename $(@F))'." >&2; \
	elif test ! -f $@; then \
	  rm -f $<; $(MAKE) $<; \
	fi

# Directory generation rule:
%/.dirstamp:
	$(silent_MKDIR)@MKDIR_P@ $(@D) && touch $@

# Dependency generation rule:
%.f90.d: %.f90 Makefile | $(dirstamps)
	$(silent_DEPGEN)$(DEPGEN) @depgen.config -o $@ --obj-name $(@:.f90.d=.o) $< -- @DEPGEN_DEFS@ $(config_FCFLAGS) $(FCFLAGS)

# Undetectable Fortran dependencies:
src/program/main.o:| src/program/implicit_external.o

# Make bundled libraries:
$(bundled_subdirs):
	@if test -f '$@/Makefile'; then \
	  $(MAKE) -C $@ $(filter all mostlyclean clean distclean, $(MAKECMDGOALS)) V=$(V); \
	else \
	  test xdistclean = x$(filter distclean, $(MAKECMDGOALS)); \
	fi

# Dummy dependency file generation rule (called by config.status):
dummy-depfiles: | $(dirstamps)
	@for file in $(depfiles); do \
	  test -e "$$file" || touch "$$file"; \
	done

ifeq (,$(filter $(MAKECMDGOALS), depend mostlyclean clean distclean maintainer-clean dummy-depfiles))
include $(depfiles)
endif
