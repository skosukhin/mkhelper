FC=@FC@
FCFLAGS=-I$(SRC_DIR)/include @FCFLAGS@
LDFLAGS=@LDFLAGS@
LIBS=@LIBS@

# Add definitions
FCFLAGS+=@FC_DEFINE@PRINT_MOD_STRINGS

# Build directories
SRC_DIR=@srcdir@/src
BLD_DIR=build
MOD_DIR=$(BLD_DIR)/mod
OBJ_DIR=$(BLD_DIR)/obj

# Fortran dependency generator
FORTDEP=@srcdir@/mkhelper/fortdep

# The dependency generator ignores these modules as dependencies
FORTDEP_EXTERNAL_MODS="iso_c_binding,iso_fortran_env,ieee_exceptions,ieee_arithmetic,ieee_features,omp_lib,omp_lib_kinds,openacc,mpi"

# Arguments for the dependency generator
FORTDEP_FLAGS="--mod-file-ext=@FORTDEP_MODULE_FILE_EXT@"\
              "--mod-file-upper=@FORTDEP_MODULE_FILE_UPPER@"\
              "--inc-order=@FORTDEP_INC_ORDER@"\
              "--inc-pp-order=@FORTDEP_INC_PP_ORDER@"\
              "--external-mods=$(FORTDEP_EXTERNAL_MODS)"\
              "--fc-def-flag=@FC_DEFINE@"\
              "--fc-mod-out-flag=@FC_MODOUT@"\
              "--inc-root=$(SRC_DIR)"\
              "--try-eval-pp-expr"\
              "--debug"

# Create directories for module and object files
$(shell @MKDIR_P@ $(MOD_DIR) $(OBJ_DIR))

FCFLAGS:=@FC_MODINC@$(MOD_DIR) $(FCFLAGS) @FC_MODOUT@$(MOD_DIR)

.SUFFIXES:
.PHONY: all clean distclean

all: $(BLD_DIR)/main;

$(BLD_DIR)/main: $(OBJ_DIR)/main.o
	$(FC) -o $@ $(LDFLAGS) $(shell find $(OBJ_DIR) -name '*.o') $(LIBS)

%.@FORTDEP_MODULE_FILE_EXT@:
	@if test -f $@; then :; else rm -f $<; $(MAKE) $<; fi

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.f90
	$(FC) $(FCFLAGS) @FCFLAGS_f90@ -c $< -o $@

$(OBJ_DIR)/%.d: $(SRC_DIR)/%.f90
	@@MKDIR_P@ $(@D); \
	$(FORTDEP) $< $@ --obj-file-path=$(@:.d=.o) $(FORTDEP_FLAGS) -- $(FCFLAGS) 2> /dev/null

clean:
	rm -rf $(MOD_DIR) $(OBJ_DIR)

distclean:
	@$(MAKE) clean
	rm -f config.log config.status Makefile

ifeq (,$(filter $(MAKECMDGOALS), clean distclean))
-include $(patsubst $(SRC_DIR)/%.f90, $(OBJ_DIR)/%.d, $(shell find $(SRC_DIR) -name '*.f90'))
endif


